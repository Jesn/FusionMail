{
  "name": "Git 提交前安全检查",
  "description": "在执行 git commit 前自动检查暂存文件的安全性",
  "trigger": "manual",
  "icon": "🔐",
  "category": "git",
  "prompt": "# Git 提交安全检查\n\n请执行以下安全检查，确保不会提交敏感信息：\n\n## 第一步：查看暂存的文件\n\n```bash\ngit diff --cached --name-only\n```\n\n## 第二步：执行安全检查\n\n运行安全检查脚本：\n```bash\n./check-commit-security.sh\n```\n\n或手动检查：\n\n### 1. 检查邮箱地址\n```bash\ngit diff --cached | grep -nE \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\" | grep -v \"your@\" | grep -v \"example.com\" | grep -v \"test@\" | grep -v \"placeholder\"\n```\n\n### 2. 检查密码\n```bash\ngit diff --cached | grep -niE \"(password|passwd|pwd|authorization).*=.*['\\\"][^'\\\"]{8,}\" | grep -v \"your_\" | grep -v \"example\" | grep -v \"placeholder\"\n```\n\n### 3. 检查 API 密钥\n```bash\ngit diff --cached | grep -niE \"(api[_-]?key|token|secret|bearer).*=.*['\\\"][a-zA-Z0-9]{20,}\" | grep -v \"your_\" | grep -v \"example\" | grep -v \"placeholder\"\n```\n\n### 4. 检查敏感文件\n```bash\ngit diff --cached --name-only | grep -E \"(\\.env$|\\.test-config$|credentials|secrets|\\.pem$|\\.key$|测试账号)\"\n```\n\n### 5. 检查数据库连接字符串\n```bash\ngit diff --cached | grep -niE \"(postgresql|mysql|mongodb)://[^@]+:[^@]+@\"\n```\n\n## 第三步：分析结果\n\n根据检查结果：\n\n**如果发现问题**：\n- ❌ 列出所有发现的敏感信息\n- 📍 指出具体的文件名和行号\n- 💡 提供修复建议（使用环境变量、配置文件等）\n- ⚠️ 建议不要提交，先修复问题\n\n**如果没有问题**：\n- ✅ 确认可以安全提交\n- 📋 总结检查的文件数量\n- 💚 给出提交建议\n\n## 第四步：提供提交命令\n\n如果检查通过，提供提交命令：\n```bash\ngit commit -m \"your commit message\"\n```\n\n## 参考规范\n\n详细规范请查看：`.kiro/steering/git-commit-security.md`\n\n## 注意事项\n\n- 占位符邮箱（如 your@example.com）是允许的\n- 示例密码（如 your_password_here）是允许的\n- 配置模板文件（如 .env.example）是允许的\n- 但真实的凭证信息绝对不允许提交！"
}
